<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Appointment Request</title>
    <link rel="stylesheet" href="/css/appointmentSubmit.css">
</head>
<body>
    <!-- Navigation Bar -->
    <%- include('partials/patientNavbar.ejs') %>

    <div class="container"> 
        <h1>Appointment Request</h1>
        <form id="appointment-form">
            <!-- Doctor Category Dropdown -->
            <div class="form-group">
                <label for="doctor-category">Doctor Category</label>
                <select id="doctor-category" name="doctorCategory" required>
                    <option value="">-- Select Category --</option>
                    <!-- Categories will be populated dynamically -->
                </select>
            </div>

            <!-- Select Doctor Dropdown -->
            <div class="form-group">
                <label for="select-doctor">Select Doctor</label>
                <select id="select-doctor" name="selectDoctor" required>
                    <option value="">-- Select Doctor --</option>
                    <!-- Doctors will be populated dynamically -->
                </select>
            </div>

            <!-- Appointment Date Input -->
            <div class="form-group">
                <label for="appointment-date">Appointment Date</label>
                <input type="date" id="appointment-date" name="appointmentDate" required min="<%= new Date().toISOString().split('T')[0] %>">
            </div>

            <!-- Available Times Dropdown -->
            <div class="form-group">
                <label for="available-times">Available Times</label>
                <select id="available-times" name="appointmentTime" required>
                    <option value="">-- Select Time --</option>
                    <!-- Available times will be populated dynamically -->
                </select>
            </div>

            <!-- Reason for Appointment Textbox -->
            <div class="form-group">
                <label for="reason">Reason for Appointment</label>
                <textarea id="reason" name="reason" rows="4" placeholder="Write your reason here..." required></textarea>
            </div>

            <!-- Submit Button -->
            <div class="form-actions">
                <button type="submit">Submit Request</button>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const doctorCategorySelect = document.getElementById('doctor-category');
            const doctorSelect = document.getElementById('select-doctor');
            const appointmentDateInput = document.getElementById('appointment-date');
            const availableTimesSelect = document.getElementById('available-times');

            // Fetch and populate doctor categories
            try {
                const categoriesResponse = await fetch('/doctor/doctor-categories');
                if (!categoriesResponse.ok) throw new Error('Failed to fetch categories');
                const categories = await categoriesResponse.json();
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    doctorCategorySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching doctor categories:', error);
            }

            // Fetch and populate doctors based on selected category
            doctorCategorySelect.addEventListener('change', async () => {
                const category = doctorCategorySelect.value;
                doctorSelect.innerHTML = '<option value="">-- Select Doctor --</option>';
                if (category) {
                    try {
                        const doctorsResponse = await fetch(`/doctor/doctors?category=${category}`);
                        if (!doctorsResponse.ok) throw new Error('Failed to fetch doctors');
                        const doctors = await doctorsResponse.json();
                        doctors.forEach(doctor => {
                            const option = document.createElement('option');
                            option.value = doctor.doctorid;
                            option.textContent = doctor.fullname;
                            doctorSelect.appendChild(option);
                        });
                    } catch (error) {
                        console.error('Error fetching doctors:', error);
                    }
                }
            });

            // Fetch and populate available times based on selected doctor and date
            async function fetchAvailableTimes() {
                const doctorId = doctorSelect.value;
                const appointmentDate = appointmentDateInput.value;
                availableTimesSelect.innerHTML = '<option value="">-- Select Time --</option>';
                if (doctorId && appointmentDate) {
                    try {
                        const timesResponse = await fetch(`/doctor/available-times?doctorId=${doctorId}&date=${appointmentDate}`);
                        if (!timesResponse.ok) throw new Error('Failed to fetch available times');
                        const times = await timesResponse.json();
                        times.forEach(time => {
                            const option = document.createElement('option');
                            option.value = time;
                            option.textContent = time;
                            availableTimesSelect.appendChild(option);
                        });
                    } catch (error) {
                        console.error('Error fetching available times:', error);
                    }
                }
            }

            doctorSelect.addEventListener('change', fetchAvailableTimes);
            appointmentDateInput.addEventListener('change', fetchAvailableTimes);

            // Handle form submission
            document.getElementById('appointment-form').addEventListener('submit', async function (event) {
                event.preventDefault(); // Prevent form from submitting

                // Get form data
                const formData = new FormData(event.target);
                const data = Object.fromEntries(formData.entries());

                // Send data to server
                try {
                    const response = await fetch('/student/appointment-create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert('Appointment Request Submitted Successfully');
                        // Refresh the page
                        window.location.reload();
                    } else {
                        alert('Failed to Submit Appointment Request');
                    }
                } catch (error) {
                    console.error('Error submitting appointment request:', error);
                    alert('Failed to Submit Appointment Request');
                }
            });
        });
    </script>
</body>
</html>
